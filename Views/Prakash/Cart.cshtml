@model List<CartItem>

<h2 class="cart-title">🛒 Your Cart</h2>

@* Hidden form just to render AntiForgeryToken for JS *@
<form id="antiForgeryForm" style="display:none;">
    @Html.AntiForgeryToken()
</form>

@if (!Model.Any())
{
    <p class="empty-cart">No items in cart.</p>
}
else
{
    <table class="cart-table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Qty</th>
                <th>Price</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr data-product-id="@item.Product.Id">
                    <td>@item.Product.Name</td>
                    <td>
                        <button class="qty-btn" onclick="updateQuantity(@item.Product.Id, -1)">-</button>
                        <span class="qty-display">@item.Quantity</span>
                        <button class="qty-btn" onclick="updateQuantity(@item.Product.Id, 1)">+</button>
                    </td>
                    <td>₹@item.Product.Price</td>
                    <td class="total-price">₹@(item.Product.Price* item.Quantity)</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="cart-actions">
        <a href="/" class="continue-shopping-btn">← Continue Shopping</a>

        <form asp-controller="Cart" asp-action="BuyNow" method="post" class="buy-now-form">
            @Html.AntiForgeryToken()  @* This form also needs token for POST *@
            <button type="submit" class="continue-shopping-btn">Buy Now →</button>
        </form>
    </div>
}

<style>
    /* Your existing styles here */
    .buy-now-form {
        display: inline-block;
        margin-left: 15px;
    }

    .cart-actions {
        text-align: center;
        margin-top: 30px;
    }

    .continue-shopping-btn {
        display: inline-block;
        padding: 12px 24px;
        background: linear-gradient(to right, #28a745, #2ecc71);
        color: white;
        font-size: 16px;
        font-weight: 600;
        text-decoration: none;
        border-radius: 8px;
        transition: background 0.3s ease;
    }

        .continue-shopping-btn:hover {
            background: linear-gradient(to right, #2ecc71, #28a745);
            text-decoration: none;
        }

    .cart-title {
        text-align: center;
        font-size: 2rem;
        color: #333;
        margin-bottom: 30px;
        border-bottom: 2px solid #28a745;
        display: inline-block;
        padding-bottom: 5px;
    }

    .empty-cart {
        text-align: center;
        font-size: 1.2rem;
        color: #888;
        margin-top: 40px;
    }

    .cart-table {
        width: 90%;
        margin: auto;
        border-collapse: collapse;
        font-family: 'Segoe UI', sans-serif;
        box-shadow: 0 0 12px rgba(0,0,0,0.1);
        background-color: #fff;
    }

        .cart-table th {
            background-color: #28a745;
            color: white;
            padding: 12px;
            text-align: left;
            font-size: 16px;
        }

        .cart-table td {
            padding: 12px;
            border-bottom: 1px solid #ddd;
            font-size: 15px;
            vertical-align: middle;
        }

        .cart-table tr:hover {
            background-color: #f9f9f9;
        }

    .qty-btn {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 5px 10px;
        font-size: 16px;
        cursor: pointer;
        border-radius: 4px;
        user-select: none;
        transition: background-color 0.3s ease;
        margin: 0 3px;
    }

        .qty-btn:hover {
            background-color: #218838;
        }

    .qty-display {
        font-size: 16px;
        min-width: 25px;
        display: inline-block;
        text-align: center;
    }
</style>

@section Scripts {
    <script>
        async function updateQuantity(productId, change) {
            // Get the token from hidden form
            const token = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]').value;

            const response = await fetch('/Cart/UpdateQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ productId: productId, change: change })
            });

            if (response.ok) {
                const updatedCart = await response.json();

                // Update UI for this product
                const row = document.querySelector(`tr[data-product-id='${productId}']`);
                if (row) {
                    const item = updatedCart.find(i => i.product.id === productId);
                    if (item) {
                        row.querySelector('.qty-display').textContent = item.quantity;
                        row.querySelector('.total-price').textContent = '₹' + (item.product.price * item.quantity);
                    }
                }
            } else {
                alert('Error updating quantity.');
            }
        }
    </script>
}
